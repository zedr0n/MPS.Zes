package ZES.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class CommandHandler__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x7890b7ca7815b026L, "ZES.structure.CommandHandler");

  public static final SMethod<String> name_id7ygHWDS5zVh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("name").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7ygHWDS5zVh").build();
  public static final SMethod<Boolean> isCreate_id7ygHWDS5$dH = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isCreate").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7ygHWDS5$dH").build();
  public static final SMethod<String> project_id7ygHWDS5$PJ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("project").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7ygHWDS5$PJ").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(name_id7ygHWDS5zVh, isCreate_id7ygHWDS5$dH, project_id7ygHWDS5$PJ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String name_id7ygHWDS5zVh(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.command$E2L0), PROPS.name$tAp1) + "Handler";
  }
  /*package*/ static boolean isCreate_id7ygHWDS5$dH(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(__thisNode__, LINKS.command$E2L0), PROPS.isCreate$AJyY);
  }
  /*package*/ static String project_id7ygHWDS5$PJ(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.command$E2L0), PROPS.project$AJk0);
  }

  /*package*/ CommandHandler__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) name_id7ygHWDS5zVh(node));
      case 1:
        return (T) ((Boolean) isCreate_id7ygHWDS5$dH(node));
      case 2:
        return (T) ((String) project_id7ygHWDS5$PJ(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink command$E2L0 = MetaAdapterFactory.getReferenceLink(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x7890b7ca7815b026L, 0x7890b7ca7815b027L, "command");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty isCreate$AJyY = MetaAdapterFactory.getProperty(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x45a819bfd46f2e3aL, 0x45a819bfd46f2e3dL, "isCreate");
    /*package*/ static final SProperty project$AJk0 = MetaAdapterFactory.getProperty(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x45a819bfd46f2e1fL, 0x45a819bfd46f2e36L, "project");
  }
}
