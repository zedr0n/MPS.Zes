package ZES.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ActCommandHandler;
  private ConceptPresentation props_AggregateRoot;
  private ConceptPresentation props_Command;
  private ConceptPresentation props_CommandHandler;
  private ConceptPresentation props_CreateCommand;
  private ConceptPresentation props_CreateCommandHandler;
  private ConceptPresentation props_DomainClass;
  private ConceptPresentation props_Projection;
  private ConceptPresentation props_Query;
  private ConceptPresentation props_QueryHandler;
  private ConceptPresentation props_QueryResult;
  private ConceptPresentation props_Target;
  private ConceptPresentation props_TargetCommand;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActCommandHandler:
        if (props_ActCommandHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x7890b7ca7815b026L, 0x7890b7ca7815b027L, "command", "", "");
          props_ActCommandHandler = cpb.create();
        }
        return props_ActCommandHandler;
      case LanguageConceptSwitch.AggregateRoot:
        if (props_AggregateRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AggregateRoot = cpb.create();
        }
        return props_AggregateRoot;
      case LanguageConceptSwitch.Command:
        if (props_Command == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Command");
          cpb.presentationByName();
          props_Command = cpb.create();
        }
        return props_Command;
      case LanguageConceptSwitch.CommandHandler:
        if (props_CommandHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x7890b7ca7815b026L, 0x7890b7ca7815b027L, "command", "", "");
          props_CommandHandler = cpb.create();
        }
        return props_CommandHandler;
      case LanguageConceptSwitch.CreateCommand:
        if (props_CreateCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CreateCommand = cpb.create();
        }
        return props_CreateCommand;
      case LanguageConceptSwitch.CreateCommandHandler:
        if (props_CreateCommandHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x7890b7ca7815b026L, 0x7890b7ca7815b027L, "command", "", "");
          props_CreateCommandHandler = cpb.create();
        }
        return props_CreateCommandHandler;
      case LanguageConceptSwitch.DomainClass:
        if (props_DomainClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DomainClass = cpb.create();
        }
        return props_DomainClass;
      case LanguageConceptSwitch.Projection:
        if (props_Projection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Projection = cpb.create();
        }
        return props_Projection;
      case LanguageConceptSwitch.Query:
        if (props_Query == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Query = cpb.create();
        }
        return props_Query;
      case LanguageConceptSwitch.QueryHandler:
        if (props_QueryHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xabe666e11ee143feL, 0x93c4703403beeec8L, 0x7890b7ca78d75a70L, 0x7890b7ca78d75a74L, "query", "", "");
          props_QueryHandler = cpb.create();
        }
        return props_QueryHandler;
      case LanguageConceptSwitch.QueryResult:
        if (props_QueryResult == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_QueryResult = cpb.create();
        }
        return props_QueryResult;
      case LanguageConceptSwitch.Target:
        if (props_Target == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Target = cpb.create();
        }
        return props_Target;
      case LanguageConceptSwitch.TargetCommand:
        if (props_TargetCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TargetCommand = cpb.create();
        }
        return props_TargetCommand;
    }
    return null;
  }
}
